package manager;

import org.junit.jupiter.api.DisplayName;
import task.Epic;
import task.Subtask;
import task.Task;


import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public abstract class TaskManagerTest<T extends TaskManager> {
    protected T taskManager;

    protected abstract T createTaskManager();

    @BeforeEach
    void setUp() throws IOException {
        taskManager = createTaskManager();
    }

    // Общие тесты для всех реализаций TaskManager
    @Test
    void testTasksAreEqualIfIdEqual() {
        Task t1 = new Task("T", "D", 1, Status.NEW);
        Task t2 = new Task("T2", "D2", 1, Status.DONE);
        assertEquals(t1, t2);
    }

    @Test
    void testSubtaskAndEpicAreEqualIfIdEqual() {
        Epic e1 = new Epic("E", "D", 5, Status.NEW);
        Epic e2 = new Epic("E2", "D2", 5, Status.DONE);
        assertEquals(e1, e2);

        Subtask s1 = new Subtask("S", "D", 10, Status.NEW, 2);
        Subtask s2 = new Subtask("S2", "D2", 10, Status.DONE, 2);
        assertEquals(s1, s2);
    }

    @Test
    void testEpicCannotContainItselfAsSubtask() {
        Epic epic = new Epic("Epic", "Description", 1, Status.NEW);
        Subtask validSubtask = new Subtask("Subtask", "Desc", 2, Status.NEW, epic.getTaskId());
        Subtask invalidSubtask = new Subtask("InvalidSubtask", "Desc", epic.getTaskId(), Status.NEW, epic.getTaskId());

        ArrayList<Subtask> subtasks = new ArrayList<>();
        subtasks.add(validSubtask);
        subtasks.add(invalidSubtask);
        epic.setSubtasks(subtasks);

        for (Subtask sub : epic.getSubtasks()) {
            assertNotEquals(epic.getTaskId(), sub.getTaskId(), "Epic не должен содержать сам себя");
        }
    }

    @Test
    void testSubtaskCannotBeItsOwnEpic() {
        Subtask subtask = new Subtask("S", "D", 42, Status.NEW, 42);
        assertNotEquals(subtask.getTaskId(), subtask.getEpicId(), "Subtask не может ссылаться на себя как на эпик");
    }

    @Test
    void testTaskManagerAddsAndFindsTasksById() {
        Task task = taskManager.addTask(new Task("T", "D"));
        Epic epic = taskManager.addEpic(new Epic("E", "D"));
        Subtask sub = taskManager.addSubtask(new Subtask("S", "D", epic.getTaskId()));

        assertEquals(task, taskManager.getTask(task.getTaskId()));
        assertEquals(epic, taskManager.getEpic(epic.getTaskId()));
        assertEquals(sub, taskManager.getSubtask(sub.getTaskId()));
    }

    @Test
    void testManualAndAutoGeneratedIdsDoNotConflict() {
        Subtask manual = new Subtask("Manual", "D", 99, Status.NEW, 1);
        Epic epic = taskManager.addEpic(new Epic("E", "D"));
        taskManager.addSubtask(manual);

        Subtask auto = taskManager.addSubtask(new Subtask("Auto", "D", epic.getTaskId()));
        assertNotEquals(99, auto.getTaskId(), "Сгенерированный id не должен совпадать с ручным");
    }

    @Test
    void testTaskIsNotChangedByManagerOnAdd() {
        Task original = new Task("T", "D");
        String originalName = original.getTaskName();
        String originalDesc = original.getTaskDescription();
        Status originalStatus = original.getStatus();

        Task added = taskManager.addTask(original);

        assertEquals(originalName, added.getTaskName());
        assertEquals(originalDesc, added.getTaskDescription());
        assertEquals(originalStatus, added.getStatus());
        assertNotEquals(0, added.getTaskId(), "У задачи должен быть присвоен уникальный taskId");
    }

    @Test
    void testManagerAddsTasksToHistoryWhenGetMethodsCalled() {
        Task t = taskManager.addTask(new Task("HistoryTask", "Tracked"));
        Epic e = taskManager.addEpic(new Epic("HistoryEpic", "Tracked"));
        Subtask s = taskManager.addSubtask(new Subtask("HistorySub", "Tracked", e.getTaskId()));

        taskManager.getTask(t.getTaskId());
        taskManager.getEpic(e.getTaskId());
        taskManager.getSubtask(s.getTaskId());

        List<Task> history = taskManager.getHistory();
        assertEquals(3, history.size());
    }

    @Test
    void testLegacyFunctionality() {
        // Проверка сеттеров task.Task
        Task task = new Task("OldName", "OldDesc");
        task.setTaskName("NewName");
        task.setTaskDescription("NewDesc");
        assertEquals("NewName", task.getTaskName());
        assertEquals("NewDesc", task.getTaskDescription());

        // Добавление и обновление task.Task
        Task addedTask = taskManager.addTask(new Task("T1", "D1"));
        addedTask.setTaskName("T1-upd");
        addedTask.setTaskDescription("D1-upd");
        Task updatedTask = taskManager.updateTask(addedTask);
        assertNotNull(updatedTask);
        assertEquals("T1-upd", taskManager.getTask(addedTask.getTaskId()).getTaskName());

        // Проверка deleteTask
        Task toDelete = taskManager.addTask(new Task("ToDel", "D"));
        int delId = toDelete.getTaskId();
        taskManager.deleteTask(delId);
        assertNull(taskManager.getTask(delId));

        // Проверка конструкторов
        Epic epicTmp = taskManager.addEpic(new Epic("Etmp", "DescEtmp"));
        Subtask fullSub = new Subtask("Sfull", "Dfull", 99, Status.NEW, epicTmp.getTaskId());
        assertEquals(99, fullSub.getTaskId());

        Epic fullEpic = new Epic("Efull", "DescEfull", 55, Status.NEW);
        assertEquals(55, fullEpic.getTaskId());

        // Добавление эпика и подзадач
        Epic epic1 = taskManager.addEpic(new Epic("Epic1", "Desc1"));
        Subtask sub1 = taskManager.addSubtask(new Subtask("Sub1", "D1", epic1.getTaskId()));
        Subtask sub2 = taskManager.addSubtask(new Subtask("Sub2", "D2", epic1.getTaskId()));

        // Проверка updateSubtask и статуса эпика
        sub1.setTaskName("Sub1-new");
        sub1.setStatus(Status.DONE);
        taskManager.updateSubtask(sub1);
        assertEquals(Status.IN_PROGRESS, taskManager.getEpic(epic1.getTaskId()).getStatus());

        sub2.setStatus(Status.DONE);
        taskManager.updateSubtask(sub2);
        assertEquals(Status.DONE, taskManager.getEpic(epic1.getTaskId()).getStatus());

        // Проверка clear методов
        taskManager.clearTasks();
        assertTrue(taskManager.getTasks().isEmpty());

        taskManager.clearSubtasks();
        for (Epic e : taskManager.getEpics()) {
            assertTrue(e.getSubtasks().isEmpty());
            assertEquals(Status.NEW, e.getStatus());
        }

        taskManager.clearEpics();
        assertTrue(taskManager.getEpics().isEmpty());
        assertTrue(taskManager.getSubtasks().isEmpty());
    }

    // Проверка методов с разными данными
    @Test
    void testGetTask() {
        // a. Со стандартным поведением
        Task task = taskManager.addTask(new Task("Test", "Description"));
        Task retrieved = taskManager.getTask(task.getTaskId());
        assertEquals(task, retrieved);

        // b. С пустым списком задач
        taskManager.clearTasks();
        assertNull(taskManager.getTask(task.getTaskId()));

        // c. С неверным идентификатором задачи
        assertNull(taskManager.getTask(-1));
        assertNull(taskManager.getTask(0));
        assertNull(taskManager.getTask(999));
    }

    @Test
    void testGetEpic() {
        // a. Со стандартным поведением
        Epic epic = taskManager.addEpic(new Epic("Test", "Description"));
        Epic retrieved = taskManager.getEpic(epic.getTaskId());
        assertEquals(epic, retrieved);

        // b. С пустым списком задач
        taskManager.clearEpics();
        assertNull(taskManager.getEpic(epic.getTaskId()));

        // c. С неверным идентификатором задачи
        assertNull(taskManager.getEpic(-1));
        assertNull(taskManager.getEpic(0));
        assertNull(taskManager.getEpic(999));
    }

    @Test
    void testGetSubtask() {
        // a. Со стандартным поведением
        Epic epic = taskManager.addEpic(new Epic("Test", "Description"));
        Subtask subtask = taskManager.addSubtask(new Subtask("Test", "Description", epic.getTaskId()));
        Subtask retrieved = taskManager.getSubtask(subtask.getTaskId());
        assertEquals(subtask, retrieved);

        // b. С пустым списком задач
        taskManager.clearSubtasks();
        assertNull(taskManager.getSubtask(subtask.getTaskId()));

        // c. С неверным идентификатором задачи
        assertNull(taskManager.getSubtask(-1));
        assertNull(taskManager.getSubtask(0));
        assertNull(taskManager.getSubtask(999));
    }

    @Test
    void testUpdateTask() {
        // a. Со стандартным поведением
        Task task = taskManager.addTask(new Task("Original", "Desc"));
        Task updated = new Task("Updated", "NewDesc", task.getTaskId(), Status.IN_PROGRESS);
        Task result = taskManager.updateTask(updated);
        assertEquals(updated, result);

        // b. С пустым списком задач
        taskManager.clearTasks();
        assertNull(taskManager.updateTask(updated));

        // c. С неверным идентификатором задачи
        Task invalidTask = new Task("Invalid", "Desc", -1, Status.NEW);
        assertNull(taskManager.updateTask(invalidTask));
    }

    @Test
    void testUpdateEpic() {
        // a. Со стандартным поведением
        Epic epic = taskManager.addEpic(new Epic("Original", "Desc"));
        Epic updated = new Epic("Updated", "NewDesc", epic.getTaskId(), Status.DONE);
        Epic result = taskManager.updateEpic(updated);
        assertEquals(updated, result);

        // b. С пустым списком задач
        taskManager.clearEpics();
        assertNull(taskManager.updateEpic(updated));

        // c. С неверным идентификатором задачи
        Epic invalidEpic = new Epic("Invalid", "Desc", -1, Status.NEW);
        assertNull(taskManager.updateEpic(invalidEpic));
    }

    @Test
    void testUpdateSubtask() {
        // a. Со стандартным поведением
        Epic epic = taskManager.addEpic(new Epic("Epic", "Desc"));
        Subtask subtask = taskManager.addSubtask(new Subtask("Original", "Desc", epic.getTaskId()));
        Subtask updated = new Subtask("Updated", "NewDesc", subtask.getTaskId(), Status.DONE, epic.getTaskId());
        Subtask result = taskManager.updateSubtask(updated);
        assertEquals(updated, result);

        // b. С пустым списком задач
        taskManager.clearSubtasks();
        assertNull(taskManager.updateSubtask(updated));

        // c. С неверным идентификатором задачи
        Subtask invalidSubtask = new Subtask("Invalid", "Desc", -1, Status.NEW, epic.getTaskId());
        assertNull(taskManager.updateSubtask(invalidSubtask));
    }

    @Test
    void testDeleteTask() {
        // a. Со стандартным поведением
        Task task = taskManager.addTask(new Task("Test", "Desc"));
        taskManager.deleteTask(task.getTaskId());
        assertNull(taskManager.getTask(task.getTaskId()));

        // b. С пустым списком задач
        taskManager.deleteTask(1); // Не должно быть исключения

        // c. С неверным идентификатором задачи
        taskManager.deleteTask(-1);
        taskManager.deleteTask(0);
        taskManager.deleteTask(999);
    }

    @Test
    void testDeleteEpic() {
        // a. Со стандартным поведением
        Epic epic = taskManager.addEpic(new Epic("Test", "Desc"));
        taskManager.deleteEpic(epic.getTaskId());
        assertNull(taskManager.getEpic(epic.getTaskId()));

        // b. С пустым списком задач
        taskManager.deleteEpic(1); // Не должно быть исключения

        // c. С неверным идентификатором задачи
        taskManager.deleteEpic(-1);
        taskManager.deleteEpic(0);
        taskManager.deleteEpic(999);
    }

    @Test
    void testDeleteSubtask() {
        // a. Со стандартным поведением
        Epic epic = taskManager.addEpic(new Epic("Epic", "Desc"));
        Subtask subtask = taskManager.addSubtask(new Subtask("Test", "Desc", epic.getTaskId()));
        taskManager.deleteSubtask(subtask.getTaskId());
        assertNull(taskManager.getSubtask(subtask.getTaskId()));

        // b. С пустым списком задач
        taskManager.deleteSubtask(1); // Не должно быть исключения

        // c. С неверным идентификатором задачи
        taskManager.deleteSubtask(-1);
        taskManager.deleteSubtask(0);
        taskManager.deleteSubtask(999);
    }

    // Тесты для расчёта статуса
    @Test
    @DisplayName("a. Расчет статуса эпика - пустой список подзадач")
    void testEpicStatusWithEmptySubtasks() {
        Epic epic = taskManager.addEpic(new Epic("Test Epic", "Description"));
        assertEquals(Status.NEW, epic.getStatus(), "Статус эпика без подзадач должен быть NEW");
    }

    @Test
    @DisplayName("b. Расчет статуса эпика - все подзадачи со статусом NEW")
    void testEpicStatusWithAllNewSubtasks() {
        Epic epic = taskManager.addEpic(new Epic("Test Epic", "Description"));
        Subtask subtask1 = taskManager.addSubtask(new Subtask("Subtask 1", "Desc", epic.getTaskId()));
        Subtask subtask2 = taskManager.addSubtask(new Subtask("Subtask 2", "Desc", epic.getTaskId()));

        assertEquals(Status.NEW, epic.getStatus(), "Статус эпика со всеми NEW подзадачами должен быть NEW");
    }

    @Test
    @DisplayName("c. Расчет статуса эпика - все подзадачи со статусом DONE")
    void testEpicStatusWithAllDoneSubtasks() {
        Epic epic = taskManager.addEpic(new Epic("Test Epic", "Description"));
        Subtask subtask1 = taskManager.addSubtask(new Subtask("Subtask 1", "Desc", epic.getTaskId()));
        Subtask subtask2 = taskManager.addSubtask(new Subtask("Subtask 2", "Desc", epic.getTaskId()));

        subtask1.setStatus(Status.DONE);
        subtask2.setStatus(Status.DONE);
        taskManager.updateSubtask(subtask1);
        taskManager.updateSubtask(subtask2);

        assertEquals(Status.DONE, epic.getStatus(), "Статус эпика со всеми DONE подзадачами должен быть DONE");
    }

    @Test
    @DisplayName("d. Расчет статуса эпика - подзадачи со статусами NEW и DONE")
    void testEpicStatusWithNewAndDoneSubtasks() {
        Epic epic = taskManager.addEpic(new Epic("Test Epic", "Description"));
        Subtask subtask1 = taskManager.addSubtask(new Subtask("Subtask 1", "Desc", epic.getTaskId()));
        Subtask subtask2 = taskManager.addSubtask(new Subtask("Subtask 2", "Desc", epic.getTaskId()));

        subtask1.setStatus(Status.NEW);
        subtask2.setStatus(Status.DONE);
        taskManager.updateSubtask(subtask1);
        taskManager.updateSubtask(subtask2);

        assertEquals(Status.IN_PROGRESS, epic.getStatus(),
                "Статус эпика с подзадачами NEW и DONE должен быть IN_PROGRESS");
    }

    @Test
    @DisplayName("e. Расчет статуса эпика - подзадачи со статусом IN_PROGRESS")
    void testEpicStatusWithInProgressSubtasks() {
        Epic epic = taskManager.addEpic(new Epic("Test Epic", "Description"));
        Subtask subtask1 = taskManager.addSubtask(new Subtask("Subtask 1", "Desc", epic.getTaskId()));
        Subtask subtask2 = taskManager.addSubtask(new Subtask("Subtask 2", "Desc", epic.getTaskId()));

        subtask1.setStatus(Status.IN_PROGRESS);
        subtask2.setStatus(Status.IN_PROGRESS);
        taskManager.updateSubtask(subtask1);
        taskManager.updateSubtask(subtask2);

        assertEquals(Status.IN_PROGRESS, epic.getStatus(),
                "Статус эпика с подзадачами IN_PROGRESS должен быть IN_PROGRESS");
    }

    @Test
    @DisplayName("Расчет статуса эпика - смешанные статусы подзадач")
    void testEpicStatusWithMixedSubtasks() {
        Epic epic = taskManager.addEpic(new Epic("Test Epic", "Description"));
        Subtask subtask1 = taskManager.addSubtask(new Subtask("Subtask 1", "Desc", epic.getTaskId()));
        Subtask subtask2 = taskManager.addSubtask(new Subtask("Subtask 2", "Desc", epic.getTaskId()));
        Subtask subtask3 = taskManager.addSubtask(new Subtask("Subtask 3", "Desc", epic.getTaskId()));

        subtask1.setStatus(Status.NEW);
        subtask2.setStatus(Status.IN_PROGRESS);
        subtask3.setStatus(Status.DONE);
        taskManager.updateSubtask(subtask1);
        taskManager.updateSubtask(subtask2);
        taskManager.updateSubtask(subtask3);

        assertEquals(Status.IN_PROGRESS, epic.getStatus(),
                "Статус эпика со смешанными статусами подзадач должен быть IN_PROGRESS");
    }
}